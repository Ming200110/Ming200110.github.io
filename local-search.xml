<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>积分等式命题的证明</title>
    <link href="/2024/05/03/proofOfThePropositionOfTheIntegralEquation/"/>
    <url>/2024/05/03/proofOfThePropositionOfTheIntegralEquation/</url>
    
    <content type="html"><![CDATA[<html><script>MathJax = {  loader: {    load: ['[tex]/physics']  },  tex: {    packages: {'[+]': ['physics']}  }};</script><script id="MathJax-script" async  src="https://cdnjs.loli.net/ajax/libs/mathjax/3.0.1/es5/tex-mml-chtml.js"></script></html><h1 id="积分等式命题的证明">积分等式命题的证明</h1><ol type="1"><li><p>设 <span class="math inline">\(f(x)\inD(0,1),~f(0)=f(1)=-2,~\displaystyle\int_{0}^{1}f(x)\ddx=0\)</span>，证明: <spanclass="math inline">\(\exists\xi\in(0,1)\)</span>，使得 <spanclass="math inline">\(f&#39;(\xi)-f(\xi)=\xi.\)</span></p><p>令 <span class="math inline">\(F(x)=\e^{-x}(f(x)+x+1)\)</span>，有<span class="math inline">\(F(0)=-1,~F(1)=0\)</span>，因为 <spanclass="math inline">\(\displaystyle\int_{0}^{1}f(x)\ddx=0\)</span>，由积分中值定理知，<spanclass="math inline">\(\exists\eta\in(0,1)\)</span>，使得 <spanclass="math display">\[\displaystyle\int_{0}^{1}f(x)\ddx=f(\eta)\int_{0}^{1}\dd x=f(\eta)=0\]</span> 而 <spanclass="math inline">\(F(\eta)=\e^{-\eta}(f(\eta)+\eta+1)&gt;0\)</span>，因此<span class="math inline">\(\exists\xi\in(0,1)\)</span>，使得 <spanclass="math inline">\(F(x)\leqslant F(\xi)\)</span>，即 <spanclass="math inline">\(F(x)\)</span> 的最大值一定在区间 <spanclass="math inline">\((0,1)\)</span> 内取到， 由 Fermat 引理知，<spanclass="math inline">\(F&#39;(\xi)=0\)</span>，即 <spanclass="math display">\[\eval{-\e^{-x}(f(x)+x+1)+\e^{-x}(f&#39;(x)+1)}_{x=\xi}=f&#39;(\xi)-f(\xi)=\xi.\]</span></p></li><li><p>设 <span class="math inline">\(f(x)\)</span> 在 <spanclass="math inline">\([2,4]\)</span> 上二阶连续可导，<spanclass="math inline">\(f(3)=0\)</span>，证明: <spanclass="math inline">\(\exists\xi\in(2,4)\)</span>，使得 <spanclass="math inline">\(\displaystylef&#39;&#39;(\xi)=3\int_{2}^{4}f(x)\dd x.\)</span></p><p>构造 <span class="math inline">\(\displaystyleF(x)=\int_{2}^{x}f(t)\dd t\)</span>，那么将 <spanclass="math inline">\(F(2),F(4)\)</span> 分别在 <spanclass="math inline">\(x=3\)</span> 处 Taylor 展开，有 <spanclass="math display">\[\begin{align*}F(2)=F(3)+F&#39;(3)(2-3)+\dfrac{1}{2!}F&#39;&#39;(3)(2-3)^2+\dfrac{1}{3!}F&#39;&#39;&#39;(\xi_1)    (2-3)^3\\F(4)=F(3)+F&#39;(3)(4-3)+\dfrac{1}{2!}F&#39;&#39;(3)(4-3)^2+\dfrac{1}{3!}F&#39;&#39;&#39;(\xi_2)    (4-3)^3\end{align*}\]</span> 注意到 <spanclass="math inline">\(F(2)=F&#39;(3)=0\)</span>，那么上式化为 <spanclass="math inline">\(\begin{cases}0=F(3)+\dfrac{1}{2}F&#39;&#39;(3)-\dfrac{1}{6}F&#39;&#39;&#39;(\xi_1)\\[6pt]F(4)=F(3)+\dfrac{1}{2}F&#39;&#39;(3)+\dfrac{1}{6}F&#39;&#39;&#39;(\xi_2)\end{cases}\)</span> 即 <spanclass="math display">\[F(4)=\dfrac{1}{6}\qty(F&#39;&#39;&#39;(\xi_1)+F&#39;&#39;&#39;(\xi_2))\]</span>因为 <spanclass="math inline">\(F&#39;&#39;&#39;(x)=f&#39;&#39;(x)\)</span> 在<span class="math inline">\([2,4]\)</span> 上连续，故 <spanclass="math inline">\(F&#39;&#39;&#39;(x)\)</span> 在 <spanclass="math inline">\([2,4]\)</span> 上有最大值 <spanclass="math inline">\(M\)</span> 和最小值 <spanclass="math inline">\(m\)</span>，使得 <spanclass="math display">\[m\leqslant\dfrac{1}{2}\qty(F&#39;&#39;&#39;(\xi_1)+F&#39;&#39;&#39;(\xi_2))\leqslantM\]</span> 又由连续函数的介值定理知 <spanclass="math inline">\(\exists\xi\in(\xi_1,\xi_2)\subset(2,4)\)</span>，使得<br /><spanclass="math display">\[F&#39;&#39;&#39;(\xi)=\dfrac{1}{2}\qty(F&#39;&#39;&#39;(\xi_1)+F&#39;&#39;&#39;(\xi_2))\]</span>故 <spanclass="math inline">\(F(4)=\dfrac{1}{3}\cdot\dfrac{1}{2}\qty(F&#39;&#39;&#39;(\xi_1)+F&#39;&#39;&#39;(\xi_2))=\dfrac  {1}{3}F&#39;&#39;&#39;(\xi)\)</span>，则<span class="math display">\[F&#39;&#39;&#39;(\xi)=3F(4)\Rightarrowf&#39;&#39;(\xi)=3\int_{2}^{4}f(x)\dd x.\]</span></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>数学笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>高等数学</tag>
      
      <tag>数学技巧</tag>
      
      <tag>中值定理</tag>
      
      <tag>积分证明</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Stolz 的应用</title>
    <link href="/2024/05/02/applicationsOfStolz/"/>
    <url>/2024/05/02/applicationsOfStolz/</url>
    
    <content type="html"><![CDATA[<h1 id="stolz-的应用">Stolz 的应用</h1><h2 id="例题-1">例题 1</h2><p>对于数列 <spanclass="math inline">\(x_0=a,0&lt;a&lt;\dfrac{\pi}{2},x_n=\sinx_{n-1}~  (n=1,2,\cdots)\)</span>，证明: <spanclass="math display">\[\lim_{n\to\infty}x_n=0,~\lim_{n\to\infty}\sqrt{\frac{n}{3}}x_n=1.\]</span></p><h3 id="解答">解答</h3><p>因为 <spanclass="math inline">\(0&lt;a&lt;\dfrac{\pi}{2},~x_0=a\)</span>，递推可知<span class="math display">\[0&lt;x_n=\sinx_{n-1}&lt;x_{n-1}&lt;\dfrac{\pi}{2}~  (n=1,2,\cdots)\]</span></p><p><span class="math inline">\(\{x_n\}\)</span> 单调递减且有下界 <spanclass="math inline">\(0\)</span>，<spanclass="math inline">\(\lim\limits_{n\to\infty}x_n\)</span> 存在. 记<spanclass="math inline">\(\displaystyle\lim_{n\to\infty}x_n=A\)</span>，知<span class="math inline">\(A=\sin A\Rightarrow A=0\)</span>，<spanclass="math inline">\(\displaystyle\lim_{n\to\infty}x_n=0.\)</span></p><p>要证 <span class="math inline">\(\displaystyle\lim_{n\to\infty}\sqrt{\frac{n}{3}}x_n=1\)</span>，即证 <spanclass="math inline">\(\displaystyle\lim_{n\to\infty}\frac{n}{\dfrac{1}{x_n^2}}=3\)</span></p><p><span class="math display">\[\begin{align*}    \lim _{n\rightarrow \infty }\dfrac{n}{\dfrac{1}{x_{n}^{2}}} &amp;\xlongequal[]{\text{Stolz}}\lim _{n\rightarrow \infty }\dfrac{n-\left(n-1\right) }{\dfrac{1}{x_{n}^{2}}-\dfrac{1}{x_{n-1}^{2}}}=\lim_{n\rightarrow \infty }\dfrac{1}{\dfrac{1}{\sin^{2}x_{n-1}}-\dfrac{1}{x_{n-1}^{2}}}=\lim _{n\rightarrow \infty}\dfrac{x_{n-1}^{2}\sin ^{2}x_{n}-1}{x_{n-1}^{2}-\sin ^{2}x_{n-1}} \\                                                                              &amp;=\lim _{x\rightarrow 0}\dfrac{x^{2}\sin ^{2}x}{x^{2}-\sin ^{2}x}=\lim_{x\rightarrow 0}\dfrac{x^{4}}{\left( x+\sin x\right) \left( x-\sinx\right) }=\lim _{x\rightarrow 0}\dfrac{x^{4}}{\left( 2x+o\left(x\right) \right) \left( \dfrac{x3}{6}+o\left( x^{3}\right) \right)}                                          \\                                                                              &amp;=\lim _{x\rightarrow 0}\dfrac{1}{\left( 2+o\left( 1\right) \right)\left( \dfrac{1}{6}+o\left( 1\right) \right) }=3.\end{align*}\]</span></p><p>得证 <span class="math inline">\(\displaystyle\lim_{n\to\infty}\sqrt{\frac{n}{3}}x_n=1.\)</span></p><h2 id="例题-2">例题 2</h2><p>设 <spanclass="math inline">\(0&lt;a_1&lt;1,a_{n+1}=a_n(1-a_n)~  (\foralln\in\mathbb{N})\)</span>，证明: <spanclass="math inline">\(\displaystyle\lim_{n\to\infty}na_n=1.\)</span></p><h3 id="解答-1">解答</h3><p>由 <span class="math inline">\(0&lt;x_1&lt;1\)</span> 及 <spanclass="math inline">\(x_2=x_1(1-x_1)\)</span> 知， <spanclass="math inline">\(0&lt;x_2&lt;1\)</span>，用数学归纳法可证: <spanclass="math inline">\(\foralln\in\mathbb{N}^*:0&lt;x_n&lt;1\)</span>，于是 <spanclass="math inline">\(0&lt;\dfrac{x_{n+1}}{x_{n}}=1-x_n&lt;1~  (n=1,2,\cdots)\)</span>，从而 <span class="math inline">\(\{x_n\}\searrow 0\)</span>，不妨设<spanclass="math inline">\(\displaystyle\lim_{n\to\infty}x_n=A\)</span>，递推关系式两边取极限，得<span class="math inline">\(A=A(1-A)\)</span>，解得 <spanclass="math inline">\(A=0.\)</span> 令 <spanclass="math inline">\(b_n=\dfrac{1}{x_n}\)</span>，则 <spanclass="math inline">\(\displaystyle\lim_{n\to\infty}b_n=+\infty\)</span>，且数列<span class="math inline">\(\{b_n\}\)</span> 是严格单调递增，故由 Stolz定理</p><p><span class="math display">\[\displaystyle\lim _{n\rightarrow \infty}nx_{n}=\lim _{n\rightarrow \infty }\dfrac{n}{\dfrac{1}{x_{n}}}=\lim_{n\rightarrow \infty }\dfrac{n}{b_{n}}=\lim _{n\rightarrow \infty}\dfrac{1}{b_{n+1}-b_{n}}=\lim _{n\rightarrow \infty }\left(1-x_{n}\right) =1.\]</span></p><h2 id="例题-3">例题 3</h2><p>设 <spanclass="math inline">\(x_1&gt;0,x_{n+1}=\ln(1+x_n)~  (n=1,2,\cdots)\)</span>，求<span class="math inline">\(\lim\limits_{n\to\infty}nx_n.\)</span></p><h3 id="解答-2">解答</h3><p><spanclass="math inline">\(x_2=\ln(1+x_1)&gt;0\)</span>，用数学归纳法可证<span class="math inline">\(\forall n\in\mathbb{N}^*:x_n&gt;0\)</span>，又 <spanclass="math inline">\(x_1&gt;0,x_{n+1}=\ln(1+x_n)&lt;x_n\)</span>，故数列<span class="math inline">\(\{x_n\}\searrow 0\)</span>，那么 <spanclass="math display">\[\begin{align*}        \lim _{n\rightarrow \infty }nx_{n} &amp; =\lim _{n\rightarrow\infty }\dfrac{n}{\dfrac{1}{x_{n}}}\xlongequal[]{\text{Stolz}}\lim_{n\rightarrow \infty}\dfrac{1}{\dfrac{1}{x_{n}}-\dfrac{1}{x_{n}-1}}=\lim _{n\rightarrow\infty }\dfrac{1}{\dfrac{1}{\ln \left( 1+x_{n-1}\right)}-\dfrac{1}{x_{n-1}}} \\                                           &amp; =\lim _{n\rightarrow\infty }\dfrac{x_{n-1}\ln \left( 1+x_{n-1}\right) }{x_{n-1}-\ln \left(1+x_{n-1}\right) }=\lim _{n\rightarrow \infty}\dfrac{x_{n-1}^{2}}{\dfrac{1}{2}x_{n-1}^{2}}=2.    \end{align*}\]</span></p><h2 id="例题-4">例题 4</h2><p>序列 <spanclass="math inline">\(a_{ij}=\dfrac{i+j}{i^2+j^2}\)</span>，求极限 <spanclass="math inline">\(\displaystyle\lim_{n\to\infty}\dfrac{1}{n}\sum_{i=1}^{n}\sum_{j=1}^{n}a_{ij}.\)</span></p><h3 id="解答-3">解答</h3><p>由 Stolz (<span class="math inline">\(*/\infty\)</span> 型) 得(以下的括号不为矩阵符号) <span class="math display">\[\begin{align*}             &amp; \begin{pmatrix}                          &amp; \dfrac{1+1}{1^2+1^2}       &amp; + &amp;\dfrac{1+2}{1^2+2^2}       &amp; + &amp; \cdots &amp; + &amp;\dfrac{1+n}{1^2+n^2}       &amp; + &amp;\dfrac{1+n+1}{1^2+(n+1)^2}       \\                   +      &amp; \dfrac{2+1}{2^2+1^2}       &amp; + &amp;\dfrac{2+2}{2^2+2^2}       &amp; + &amp; \cdots &amp; + &amp;\dfrac{2+n}{2^2+n^2}       &amp; + &amp;\dfrac{2+n+1}{2^2+(n+1)^2}       \\                   \vdots &amp; \vdots                     &amp;   &amp;\vdots                     &amp;   &amp;        &amp;   &amp;\vdots                     &amp;   &amp;\vdots                           \\                   +      &amp; \dfrac{n+1}{n^2+1^2}       &amp; + &amp;\dfrac{n+2}{n^2+2^2}       &amp; + &amp; \cdots &amp; + &amp;\dfrac{n+n}{n^2+n^2}       &amp; + &amp;\dfrac{n+n+1}{n^2+(n+1)^2}       \\                   +      &amp; \dfrac{n+1+1}{(n+1)^2+1^2} &amp; + &amp;\dfrac{n+1+2}{(n+1)^2+2^2} &amp; + &amp; \cdots &amp; + &amp;\dfrac{n+1+n}{(n+1)^2+n^2} &amp; + &amp;\dfrac{n+1+n+1}{(n+1)^2+(n+1)^2}               \end{pmatrix} \\             &amp; -            \begin{pmatrix}                       &amp; \dfrac{1+1}{1^2+1^2} &amp; + &amp;\dfrac{1+2}{1^2+2^2} &amp; + &amp; \cdots &amp; + &amp;\dfrac{1+n}{1^2+n^2} \\                +      &amp; \dfrac{2+1}{2^2+1^2} &amp; + &amp;\dfrac{2+2}{2^2+2^2} &amp; + &amp; \cdots &amp; + &amp;\dfrac{2+n}{2^2+n^2} \\                \vdots &amp; \vdots               &amp;   &amp;\vdots               &amp;   &amp;        &amp;   &amp;\vdots               \\                +      &amp; \dfrac{n+1}{n^2+1^2} &amp; + &amp;\dfrac{n+2}{n^2+2^2} &amp; + &amp; \cdots &amp; + &amp;\dfrac{n+n}{n^2+n^2}            \end{pmatrix}            =2\left[ \sum ^{n}_{k=1}\dfrac{(n+1) +k}{(n+1)^{2}+k^{2}}\right] +\dfrac{1}{n+1}.        \end{align*}\]</span> <spanclass="math display">\[\begin{align*}        \lim _{n\rightarrow \infty }\dfrac{1}{n}\sum ^{n}_{i=1}\sum^{n}_{j=1}\dfrac{i+j}{i^{2}+j^{2}} &amp; =\lim _{n\rightarrow \infty}\left( \sum ^{n+1}_{i=1}\sum ^{n+1}_{j=1}-\sum ^{n}_{i=1}\sum^{n}_{j=1}\right) \dfrac{i+j}{i^{2}+j^{2}}=\lim _{n\rightarrow \infty}\left[ 2\left( \sum ^{n}_{k=1}\dfrac{(n+1) +k}{(n+1) ^{2}+k^{2}}\right)+\dfrac{1}{n+1}\right] \\                                                                                                       &amp;=\lim _{n\rightarrow \infty }\left[ \dfrac{2}{n+1}\left( \sum^{n}_{k=1}\dfrac{1+\dfrac{k}{n+1}}{1+\left( \dfrac{k}{n+1}\right)^{2}}\right) +\dfrac{1}{n+1}\right] =2\int _{0}^{1}\dfrac{1+x}{1+x^{2}}\mathrm{d} x=\dfrac{\pi}{2}+\ln 2.    \end{align*}\]</span></p>]]></content>
    
    
    <categories>
      
      <category>数学笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Stolz</tag>
      
      <tag>高等数学</tag>
      
      <tag>数学技巧</tag>
      
      <tag>极限的求法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>两点三次 Hermite 插值</title>
    <link href="/2024/05/02/twoPointTripleHermiteInterpolation/"/>
    <url>/2024/05/02/twoPointTripleHermiteInterpolation/</url>
    
    <content type="html"><![CDATA[<h1 id="两点三次-hermite-插值">两点三次 Hermite 插值</h1><h2 id="基函数">基函数</h2><p>采用基函数方法，令</p><p><spanclass="math display">\[H_3(x)=\alpha_k(x)y_k+\alpha_{k+1}(x)y_{k+1}+\beta_k(x)m_k+\beta_{k+1}(x)m_{k+1}\]</span></p><p>其中 <spanclass="math inline">\(\alpha_k(x),\alpha_{k+1}(x),\beta_k(x),\beta_{k+1}(x)\)</span>是关于点 <span class="math inline">\(x_k\)</span> 及 <spanclass="math inline">\(x_{k+1}\)</span> 的三次 Hermite插值基函数，它们应分别满足以下条件:</p><p><span class="math display">\[\begin{array}{lll}            \alpha _k(x_k)=1                        &amp; \alpha_k(x_{k+1})=0     &amp; \alpha _k&#39;(x_k)=\alpha&#39;_k(x_{k+1})=0         \\            \alpha _{k+1}(x_k)=0                    &amp; \alpha_{k+1}(x_{k+1})=1 &amp; \alpha&#39; _{k+1}(x_k)=\alpha&#39;_{k+1}(x_{k+1})=0 \\            \beta_k(x_k)=\beta_k(x_{k+1})=0         &amp;\beta&#39;_k(x_k)=1          &amp;\beta&#39;_k(x_{k+1})=0                           \\            \beta_{k+1}(x_k)=\beta_{k+1}(x_{k+1})=0 &amp;\beta&#39;_{k+1}(x_k)=0      &amp; \beta&#39;_{k+1}(x_{k+1})=1        \end{array}\]</span></p><p>解得基函数，那么有</p><p><spanclass="math display">\[H_3(x)=\left(1+2\dfrac{x-x_k}{x_{k+1}-x_k}\right)\left(\dfrac{x-x_{k+1}}{x_k-x_{k+1}}\right)^2y_k+\left(1+2\dfrac{x-x_{k+1}}{x_k-x_{k+1}}\right)\left(\dfrac{x-x_k}{x_{k+1}-x_k}\right)^2y_{k+1}+(x-x_k)\left(\dfrac{x-x_{k+1}}{x_k-x_{k+1}}\right)^2m_k+(x-x_{k+1})\left(\dfrac{x-x_k}{x_{k+1}-x_k}\right)^2m_{k+1}.\]</span></p><h2 id="例题-1">例题 1</h2><p>若函数 <span class="math inline">\(f(x)\text{ 在 }[a,b]\)</span>上三阶可导，且 <spanclass="math inline">\(f(a)=c,f(b)=d,f&#39;(a)=e,f&#39;(b)=f\)</span>，则<span class="math inline">\(\exists\xi\in(a,b)\)</span>，使得 <spanclass="math display">\[f&#39;&#39;&#39;(\xi)=6\dfrac{f(b-a)-2(d-c)+e(b-a)}{(b-a)^3}.\]</span></p><h3 id="解答">解答</h3><p>作三次 Hermite 插值多项式:</p><p><spanclass="math display">\[H_3(x)=c+e(x-a)+\dfrac{(d-c)-e(b-a)}{(b-a)^2}(x-a)^2+\dfrac{f(b-a)-2(d-c)+e(b-a)}{(b-a)^3}(x-a)^2(x-b)\]</span></p><p>则 <span class="math inline">\(H_3(x)\)</span> 与 <spanclass="math inline">\(f(x)\)</span> 在 <spanclass="math inline">\(a,b\)</span> 两点有相同的函数值与导数值，设 <spanclass="math inline">\(F(x)=f(x)-H_3(x)\)</span>，则 <spanclass="math inline">\(F(a)=F(b)=0\)</span>，由 Rolle 定理，<spanclass="math inline">\(\exists\xi_1\in(a,b)\)</span>，使得 <spanclass="math inline">\(F&#39;(\xi_1)=0\)</span>， 由于</p><p><spanclass="math display">\[F&#39;(x)=f&#39;(x)-H_3&#39;(x)=f&#39;(x)+e+2\dfrac{(d-c)-e(b-a)}{(b-a)^2}(x-a)+\dfrac{f(b-a)-2(d-c)+e(b-a)}{(b-a)^3}\left[2(x-a)(x-b)+(x-a)^2\right]\]</span></p><p>则 <span class="math inline">\(F&#39;(a)=F&#39;(b)=0\)</span>，在<span class="math inline">\([a,\xi_1]\)</span> 和 <spanclass="math inline">\([\xi_1,b]\)</span> 上应用 Rolle 定理，则 <spanclass="math inline">\(\exists\xi_2\in(a,\xi_1),\xi_3\in(\xi_1,b)\)</span>，使得</p><p><spanclass="math display">\[F&#39;&#39;(\xi_2)=F&#39;&#39;(\xi_3)=0\]</span></p><p>最后在 <span class="math inline">\([\xi_2,\xi_3]\)</span> 上应用Rolle 定理，即 <spanclass="math inline">\(\exists\xi\in(\xi_2,\xi_3)\)</span>，使得 <spanclass="math inline">\(F&#39;&#39;&#39;(\xi)=0\)</span>，即得证.</p><h2 id="例题-2">例题 2</h2><p>设函数 <span class="math inline">\(f\in C[0,1]\capD^3(0,1),~f(0)=2,~f(1)=1,~f&#39;(0)=0,~f&#39;(1)=4\)</span> 证明:存在一点 <span class="math inline">\(\xi\in(0,1)\)</span> 使得 <spanclass="math inline">\(f&#39;&#39;&#39;(\xi)=24+24\xi.\)</span></p><h3 id="解答-1">解答</h3><p>令 <span class="math inline">\(g(x)=f(x)-x^4\)</span>，则 <spanclass="math inline">\(g\in C[0,1]\cap D^3(0,1)\)</span> 那么 <spanclass="math inline">\(\begin{cases}            x_k=0  , &amp; x_{k+1}=1 \\            y_k=2  , &amp; y_{k+1}=0 \\            m_k=0  , &amp; m_{k+1}=0        \end{cases}\)</span>，因此</p><p><spanclass="math display">\[H_3(x)=2(1+x)(x-1)^2=4x^3-6x^2+2\]</span></p><p>构造 <span class="math inline">\(F(x)=g(x)-H_3(x)\)</span> 有 <spanclass="math inline">\(F(0)=F(1)=0\)</span>，由 Rolle 定理 <spanclass="math inline">\(\exists\xi_1\in(0,1)\)</span> 使得 <spanclass="math inline">\(F&#39;(\xi_1)=0\)</span>， 又 <spanclass="math inline">\(F&#39;(0)=F&#39;(\xi_1)=F&#39;(1)=0\)</span>，由Rolle 定理得 <span class="math inline">\(\exists\xi_2\in(0,\xi_1),\xi_3\in(\xi_1,1)\)</span> 使得 <spanclass="math inline">\(F&#39;&#39;(\xi_i)=0,i=2,3\)</span>， 再根据 Rolle定理得 <spanclass="math inline">\(\exists\xi\in(\xi_2,\xi_3)\subset(0,1)\)</span>使得 <span class="math inline">\(F&#39;&#39;&#39;(\xi)=0\)</span> 即</p><p><spanclass="math display">\[f&#39;&#39;&#39;(\xi)-4!\xi-24=0\Rightarrowf&#39;&#39;&#39;(\xi)=24\xi+24.\]</span></p>]]></content>
    
    
    <categories>
      
      <category>数学笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>高等数学</tag>
      
      <tag>数学技巧</tag>
      
      <tag>中值定理</tag>
      
      <tag>Hermite 插值</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HarmonyOS 应用开发</title>
    <link href="/2024/05/02/HarmonyOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/"/>
    <url>/2024/05/02/HarmonyOS%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91/</url>
    
    <content type="html"><![CDATA[<h1 id="harmonyos应用开发">HarmonyOS应用开发</h1><h2 id="第五章-ability基础知识">第五章 Ability基础知识</h2><h3 id="ability概述">Ability概述</h3><ul><li><p>一个HarmonyOS应用可以具备多少种能力，就会包含多少个Ability</p></li><li><p>FA</p><ul><li>Page模板是FA唯一支持的模板</li><li>一个Page实例可以包含一组相关页面，每个页面用一个AbilitySlice实例表示</li><li>FA就是承担前端与用户交互的</li></ul></li><li><p>PA</p><ul><li>Service模板：用于提供后台运行任务的能力</li><li>Data模板：用于对外部提供统一的数据访问抽象</li></ul></li><li><p>Ability的配置</p><ul><li>通过配置Ability元素中的type属性来指定Ability模板类型</li></ul></li></ul><h3 id="ability的三层架构">Ability的三层架构</h3><ul><li>Page Ability：代表表示层</li><li>Service Ability：代表业务层</li><li>Data Ability：代表数据访问层</li></ul><h3 id="page-ability">Page Ability</h3><ul><li><p>Page间的导航可以使用startAbility()或startAbilityForResult()方法，获得返回结果的回调为onAbilityResult()</p></li><li><p>Page Ability的基本概念</p><ul><li>一个Page可以由一个或多个AbilitySlice构成，AbilitySlice是指应用的单个页面及其控制逻辑的总和</li></ul></li><li><p>多个AbilitySlice构成一个Page</p><ul><li>当一个Page由多个AbilitySlice共同构成时，这些AbilitySlice页面提供的业务能力应具有高度相关性</li></ul></li><li><p>AbilitySlice路由配置</p><ul><li>虽然一个Page可以包含多个AbilitySlice，但是Page进入前台时界面默认只能展示一个AbilitySlice。默认展示的AbilitySlice是通过setMainRoute()方法来指定的</li><li>如果需要更改默认展示的AbilitySlice，可以通过addActionRoute()方法为此AbilitySlice配置一条路由规则</li></ul></li><li><p>不同Page间的导航</p><ul><li>不同Page中的AbilitySlice相互不可见，因此无法通过present()或presentForResult()方法直接导航到其他Page的AbilitySlice</li><li>AbilitySlice作为Page的内部单元，以Action的形式对外暴露，因此可以通过配置Intent的Action导航到目标AbilitySlice</li></ul></li></ul><h3 id="page与abilityslice的生命周期">Page与AbilitySlice的生命周期</h3><ul><li><p>Page的生命周期</p><ul><li><p>Page的生命周期的不同状态转换及其对应的回调</p></li><li><p>onStart()</p><ul><li>当系统首次创建Page实例时，触发该回调</li><li>对于一个Page实例，该回调在其生命周期过程中仅触发一次，Page在该逻辑后将进入INACTIVE状态</li><li>开发者必须重写该方法，并在此配置默认展示的AbilitySlice</li></ul></li><li><p>onActive()</p><ul><li>Page会在进入INACTIVE状态后来到前台，然后系统调用此回调</li><li>Page在此之后进入ACTIVE状态，该状态是应用与用户交互的状态</li><li>Page在此之后进入ACTIVE状态，该状态是应用与用户交互的状态</li><li>开发者通常需要成对实现onActive()和onInactive()，并在onActive()中获取在onInactive()中被释放的资源</li></ul></li><li><p>onInactive()</p><ul><li>当Page失去焦点时，系统将调用此回调，此后Page进入INACTIVE状态</li></ul></li><li><p>onBackground()</p><ul><li>如果Page不再对用户可见，系统将调用此回调通知开发者用户进行相应的资源释放，此后Page进入BACKGROUND状态</li></ul></li><li><p>onForeground()</p><ul><li>处于BACKGROUND状态的Page仍然驻留在内存中，当重新回到前台时（比如用户重新导航到此Page），系统将先调用onForeground()回调通知开发者，而后Page的生命周期状态回到INACTIVE状态</li></ul></li><li><p>onStop()</p><ul><li><p>系统将要销毁Page时，将会触发此回调函数，通知用户进行系统资源的释放</p></li><li><p>销毁Page的可能原因包括以下几个方面：</p><ul><li>用户通过系统管理能力关闭指定Page，例如使用任务管理器关闭Page</li><li>用户行为触发Page的terminateAbility()方法调用，例如使用应用的退出功能</li><li>配置变更导致系统暂时销毁Page并重建</li><li>系统出于资源管理的目的，自动触发对处于BACKGROUND状态Page的销毁</li></ul></li></ul></li></ul></li><li><p>AbilitySlice的生命周期</p><ul><li>当Page生命周期发生变化时，它的AbilitySlice也会发生相同的生命周期变化</li><li>此外，AbilitySlice还具有独立于Page的生命周期变化，这发生在同一Page中的AbilitySlice之间导航时，此时Page的生命周期状态不会改变</li></ul></li><li><p>Page与AbilitySlice生命周期的关联</p><ul><li>当AbilitySlice处于前台且具有焦点时，其生命周期状态随着所属Page的生命周期状态的变化而变化</li><li>当Page被系统销毁时，其所有已实例化的AbilitySlice将联动销毁，而不仅是处于前台的AbilitySlice</li></ul></li></ul><h3 id="service-ability">Service Ability</h3><ul><li><p>基于Service模板的Ability简称为Service，其主要用于后台运行任务，比如执行音乐播放、文件下载等，但不提供用户交互界面</p></li><li><p>Service是单实例的</p></li><li><p>在一个设备上，相同的Service只会存在一个实例</p></li><li><p>如果多个Ability共用这个实例，只有当与Service绑定的所有Ability都退出后，Service才能够退出</p></li><li><p>由于Service是在主线程里执行的，因此，如果在Service里面的操作时间过长，开发者必须在Service中创建新的线程来处理，防止造成主线程阻塞，应用程序无响应</p></li><li><p>创建Service</p><ul><li><p>继承Ability</p><ul><li><p>每个Service都是Ability的子类</p></li><li><p>Ability为Service提供了以下生命周期方法，用户可以重写这些方法来添加自己的处理</p><ul><li><p>onStart()</p><ul><li>该方法在创建Service的时候调用，用于Service的初始化</li><li>在Service的整个生命周期只会调用一次，调用时传入的Intent应为空</li></ul></li><li><p>onCommand()</p><ul><li>用户可以在该方法中做一些调用统计、初始化类的操作</li></ul></li><li><p>onConnect()</p><ul><li>在Ability和Service连接时调用，该方法返回IRemoteObject对象，用户可以在该回调函数中生成对应Service的IPC通信通道，以便Ability与Service交互</li><li>Ability可以多次连接同一个Service，系统会缓存该Service的IPC通信对象，只有第一个客户端连接Service时，系统才会调用Service的onConnect方法来生成IRemoteObject对象，而后系统会将同一个RemoteObject对象传递至其他连接同一个Service的所有客户端，而无须再次调用onConnect方法</li></ul></li><li><p>onDisconnect()</p><ul><li>在Ability与绑定的Service断开连接时调用</li></ul></li><li><p>onStop()</p><ul><li>在Service销毁时调用</li><li>Service应通过实现此方法来清理任何资源，如关闭线程、注册的侦听器等</li></ul></li></ul></li></ul></li></ul></li><li><p>启动Service</p><ul><li><p>开发者可以通过构造包含DeviceId、BundleName与AbilityName的Operation对象来设置目标Service信息</p><ul><li><p>DeviceId</p><ul><li>表示设备ID</li><li>如果是本地设备，则可以直接留空</li><li>如果是远程设备，则可以通过ohos.distributedschedule.interwork.DeviceManager提供的getDeviceList获取设备列表</li></ul></li><li><p>BundleName</p><ul><li>表示包名称</li></ul></li><li><p>AbilityName</p><ul><li>表示待启动的Ability名称</li></ul></li></ul></li><li><p>如果Service尚未运行，则系统会先调用onStart()来初始化Service，再回调Service的onCommand()方法来启动Service</p></li><li><p>如果Service正在运行，则系统会直接回调Service的onCommand()方法来启动Service</p></li></ul></li><li><p>停止Service</p><ul><li>Service一旦创建就会一直保持在后台运行，除非必须回收内存资源，否则系统不会停止或销毁Service</li><li>可以在Service中通过terminateAbility()来停止本Service，或在其他Ability调用stopAbility()来停止Service</li><li>停止Service同样支持停止本地设备Service和停止远程设备Service，使用方法与启动Service一样</li></ul></li><li><p>连接Service</p><ul><li><p>如果Service需要与Page Ability或其他应用的ServiceAbility进行交互，则应创建用于连接的Connection</p></li><li><p>Service支持其他Ability通过connectAbility()方法与其进行连接</p></li><li><p>需要传入目标Service的Intent与IAbilityConnection的实例</p><ul><li><p>IAbilityConnection提供了两个方法供开发者实现：</p><ul><li>onAbilityConnectDone()用来处理连接的回调</li><li>onAbilityDisconnectDone()用来处理断开连接的回调</li></ul></li></ul></li></ul></li><li><p>Service Ability的生命周期</p><ul><li><p>与Page类似，Service也拥有生命周期</p></li><li><p>根据调用方法的不同，其生命周期有以下两种路径：</p><ul><li><p>启动Service</p><ul><li>该Service在其他Ability调用startAbility()时创建，然后保持运行</li><li>其他Ability通过调用stopAbility()来停止Service，Service停止后，系统会将其销毁</li></ul></li><li><p>连接Service</p><ul><li>该Service在其他Ability调用connectAbility()时创建，客户端可通过调用disconnectAbility()断开连接</li><li>多个客户端可以绑定到相同的Service，而且当所有绑定全部取消后，系统就会销毁该Service</li><li>connectAbility()也可以连接通过startAbility()创建的Service</li></ul></li></ul></li></ul></li></ul><h3 id="data-ability">Data Ability</h3><ul><li><p>使用Data模板的Ability也简称Data</p></li><li><p>主要职责是管理其自身应用和其他应用存储数据的访问，并提供与其他应用共享数据的方法</p></li><li><p>Data既可用于同一设备不同应用的数据共享，也支持跨设备不同应用的数据共享</p></li><li><p>数据的存储方式多种多样，可以是传统意义上的数据库系统，也可以是本地磁盘上的文件</p></li><li><p>Data对外提供对数据的增、删、改、查，以及打开文件等接口，这些接口的具体实现由开发者提供</p></li><li><p>URI</p><ul><li><p>Data的提供方和使用方都通过URI（Uniform ResourceIdentifier，统一资源定位符）来标识一个具体的数据</p></li><li><p>HarmonyOS的URI是基于URI通用标准的，具体格式如图</p><ul><li><p>scheme</p><ul><li>协议方案名，固定为dataability，代表Data Ability所使用的协议类型</li></ul></li><li><p>authority</p><ul><li>设备ID</li><li>如果为跨设备场景，则为目标设备的ID</li><li>如果为本地设备场景，则不需要填写</li></ul></li><li><p>path</p><ul><li>资源的路径信息，代表特定资源的位置信息</li></ul></li><li><p>query</p><ul><li>查询参数</li></ul></li><li><p>fragment</p><ul><li>用于指示要访问的子资源</li></ul></li></ul></li><li><p>URI示例</p><ul><li><p>跨设备场景</p><ul><li>dataability://device_id/com.waylau.hmos.dataabilityhelperaccessfile.dataability.persondata/person/10</li></ul></li><li><p>本地设备</p><ul><li><p>dataability:///com.waylau.hmos.dataabilityhelperaccessfile.dataability.persondata/person/10</p><ul><li>注：本地设备的device_id字段为空，因此在dataability:后面有3个“/”</li></ul></li></ul></li></ul></li></ul></li><li><p>访问Data</p><ul><li><p>DataAbilityHelper为开发者提供了一系列的接口来访问不同类型的数据，比如文件、数据库等</p></li><li><p>访问文件</p><ul><li><p>DataAbilityHelper为开发者提供了FileDescriptor openFile（Uri uri,String mode）方法来操作文件</p><ul><li>其中uri用来确定目标资源路径</li><li>mode用来指定打开文件的方式，可选方式包含r（读）、w（写）、rw（读写）、wt（覆盖写）、wa（追加写）、rwt（覆盖写且可读）</li></ul></li><li><p>该方法返回一个目标文件的FD（文件描述符），把文件描述符封装成流，开发者就可以对文件流进行自定义处理</p></li></ul></li><li><p>访问数据库</p><ul><li>DataAbilityHelper为开发者提供了增、删、改、查以及批量处理等方法来操作数据库</li></ul></li></ul></li></ul><h3 id="intent">Intent</h3><ul><li><p>在HarmonyOS中，Intent是对象之间传递信息的载体</p></li><li><p>Intent的构成元素包括Operation与Parameters</p></li><li><p>Operation与Parameters</p><ul><li>Operation由表所示的属性组成</li><li>除了上述属性之外，开发者也可以通过Parameters传递某些请求所需的额外信息</li></ul></li><li><p>根据Ability的全称启动应用</p><ul><li>通过构造包含BundleName与AbilityName的Operation对象可以启动一个Ability，并导航到该Ability</li></ul></li></ul><h2 id="第六章-ability任务调度">第六章 Ability任务调度</h2><h3 id="分布式任务调度概述">分布式任务调度概述</h3><ul><li><p>“超级虚拟终端”的能力互助</p><ul><li>分布式任务调度平台是支持“超级虚拟终端”的关键技术和能力，提供针对多设备场景下的统一的组件管理能力</li></ul></li><li><p>跨设备软件访问的系统服务</p></li><li><p>全场景下的任务调度</p></li></ul><h3 id="分布式任务调度能力简介">分布式任务调度能力简介</h3><ul><li><p>全局查询</p><ul><li><p>全局查询可以分为两个维度：针对设备的查询以及针对Ability的查询</p><ul><li>针对设备的查询是指在相同组网下支持查询这个网络下到底有哪些设备，这些设备是在线的还是离线的，这个设备具备哪些Ability，等等</li><li>针对Ability的查询是指查询到底哪些设备支持具体的特定功能</li></ul></li></ul></li><li><p>启动和关闭</p><ul><li>分布式任务调度平台提供了管理远程Ability的能力，即支持启动Page模板的Ability，以及启动、关闭Service和Data模板的Ability</li></ul></li><li><p>连接和断开连接</p><ul><li>在连接到远程设备之后，就可以对设备进行一些列的操作了。操作完成之后，也可以断开连接</li></ul></li><li><p>轻量通信</p><ul><li>轻量通信本质是指从RPC（Remote ProcedureCall，远程过程调用）或者以消息的方式实现设备之间的通信</li></ul></li></ul><h3 id="分布式任务调度实现原理">分布式任务调度实现原理</h3><ul><li><p>PRC</p><ul><li>PRC主要涉及三方面，即接口定义、序列化和反序列化</li><li>要实现PRC，必须要实现IRemoteBroker接口</li><li>同时，需要在本地及对端分别实现对外接口一致的代理</li></ul></li><li><p>HarmonyOS设备之间的通信</p><ul><li>无论是调用本地设备还是远程设备的Ability，HarmonyOS都是通过RemoteObject来实现的</li><li>当初次调用远程设备时，会先通过分布式调度平台获取到远程设备的一个句柄</li><li>在后续的通信过程中，本地设备就可以不必再依赖分布式调度平台而直接通过句柄去跟远程设备进行通信，从而提升通信效率</li></ul></li><li><p>HarmonyOS设备与其他OS设备之间的通信</p><ul><li>HarmonyOS设备与其他OS设备之间无法直接通过句柄去调用，因此分布式调度平台充当了HarmonyOS设备与其他OS设备之间的代理</li><li>所有的通信必须经过分布式调度平台，分布式调度平台会做调用过程中的序列化和反序列化</li><li>因此，从通信效率而言，HarmonyOS设备与其他OS设备之间的通信效率肯定要低于HarmonyOS设备之间的通信</li></ul></li></ul><h3 id="实现分布式任务调度">实现分布式任务调度</h3><ul><li><p>如何实现分布式任务调度</p><ul><li><p>在Intent中设置支持分布式的标记</p><ul><li>例如Intent.FLAG_ABILITYSLICE_MULTI_DEVICE表示该应用支持分布式调度</li></ul></li><li><p>在config.json中的reqPermissions字段中添加多设备协同访问的权限申请</p><ul><li>三方应用使用{"name": "ohos.permission.DISTRIBUTED_DATASYNC"}</li></ul></li><li><p>PA的调用支持连接及断开连接、启动及关闭这4类行为，在进行调度时</p><ul><li>必须在Intent中指定PA对应的bundleName和abilityName</li><li>当需要跨设备启动、关闭或连接PA时，需要在Intent中指定对端设备的deviceId</li><li>可通过如设备管理类DeviceManager提供的getDeviceList获取指定条件下匿名化处理的设备列表，实现对指定设备PA的启动／关闭以及连接管理</li></ul></li><li><p>FA的调用支持启动和迁移行为，在进行调度时</p><ul><li>当启动FA时，需要开发者在Intent中指定对端设备的deviceId、bundleName和abilityName</li><li>FA的迁移实现相同bundleName和abilityName的FA跨设备迁移，因此需要指定迁移设备的deviceId</li></ul></li></ul></li><li><p>分布式任务调度支持的场景</p><ul><li><p>根据Ability模板及意图的不同，分布式任务调度向开发者提供了6种能力：启动远程FA、启动远程PA、关闭远程PA、连接远程PA、断开连接远程PA和FA跨设备迁移</p><ul><li><p>设备A启动设备B的FA</p><ul><li><p>在设备A上通过本地应用提供的启动按钮启动设备B上对应的FA</p><ul><li>例如，设备A控制设备B打开相册，只需开发者在启动FA时指定打开相册的意图即可</li></ul></li></ul></li><li><p>设备A启动设备B的PA</p><ul><li><p>在设备A上通过本地应用提供的启动按钮启动设备B上指定的PA</p><ul><li>例如，开发者在启动远程服务时通过意图指定音乐播放服务，即可实现设备A启动设备B音乐播放的能力</li></ul></li></ul></li><li><p>设备A关闭设备B的PA</p><ul><li><p>在设备A上通过本地应用提供的关闭按钮关闭设备B上指定的PA</p><ul><li>类似启动的过程，开发者在关闭远程服务时通过意图指定音乐播放服务，即可实现关闭设备B上该服务的能力</li></ul></li></ul></li><li><p>设备A连接设备B的PA</p><ul><li><p>在设备A上通过本地应用提供的连接按钮连接设备B上指定的PA</p><ul><li>连接后，通过其他功能相关按钮实现控制对端PA的能力</li><li>通过连接关系，开发者可以实现跨设备的同步服务调度，实现如大型计算任务互助等价值场景</li></ul></li></ul></li><li><p>设备A与设备B的PA断开连接</p><ul><li>在设备A上通过本地应用提供的断开连接的按钮将之前已连接的PA断开连接</li></ul></li><li><p>设备A的FA迁移至设备B</p><ul><li><p>设备A上通过本地应用提供的迁移按钮将设备A的业务无缝迁移到设备B中</p><ul><li>通过业务迁移能力打通设备A和设备B间的壁垒，实现如文档跨设备编辑、视频从客厅到房间跨设备接续播放等场景</li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="第七章-ability公共事件与通知">第七章 Ability公共事件与通知</h2><h3 id="公共事件与通知概述">公共事件与通知概述</h3><ul><li><p>在HarmonyOS里面，系统给应用发送提示一般分为两种方式，即公共事件和通知</p></li><li><p>公共事件和通知</p><ul><li><p>公共事件可分为系统公共事件和自定义公共事件</p><ul><li><p>系统公共事件</p><ul><li>系统将收集到的事件信息根据系统策略发送给订阅该事件的用户程序</li><li>例如用户可感知亮灭屏事件、系统关键服务发送的系统事件（例如USB插拔、网络连接、系统升级等）</li></ul></li><li><p>自定义公共事件</p><ul><li>应用自定义公共事件来处理业务逻辑</li></ul></li></ul></li><li><p>IntentAgent封装了一个指定行为的Intent，可以通过IntentAgent启动Ability和发送公共事件</p></li></ul></li><li><p>约束与限制</p><ul><li><p>公共事件的约束与限制</p><ul><li>目前公共事件仅支持动态订阅</li><li>部分系统事件需要具有指定的权限</li><li>目前公共事件订阅不支持多用户</li><li>ThreadMode表示线程模型，目前仅支持HANDLER模式，即在当前UI线程上执行回调函数</li><li>deviceId用来指定订阅本地公共事件还是远端公共事件</li><li>deviceId为null、空字符串或本地设备deviceId时，表示订阅本地公共事件，否则表示订阅远端公共事件</li></ul></li><li><p>通知的约束与限制</p><ul><li>通知目前支持6种样式：普通文本、长文本、图片、社交、多行文本和媒体样式</li><li>创建通知时必须包含其中一种样式</li><li>通知支持快捷回复</li></ul></li><li><p>IntentAgent的限制</p><ul><li>使用IntentAgent启动Ability时，Intent必须指定Ability的包名和类名</li></ul></li></ul></li></ul><h3 id="公共事件服务">公共事件服务</h3><ul><li><p>发送公共事件需要借助CommonEventData对象，接收公共事件需要继承CommonEventSubscriber类并实现onReceiveEvent回调函数</p></li><li><p>接口说明</p><ul><li><p>CommonEventData</p><ul><li><p>CommonEventData封装公共事件相关信息，用于在发布、分发和接收时处理数据</p><ul><li>code为有序公共事件的结果码，data为有序公共事件的结果数据，仅用于有序公共事件场景</li><li>intent不允许为空，否则发布公共事件失败</li></ul></li></ul></li><li><p>CommonEventPublishInfo</p><ul><li><p>CommonEventPublishInfo封装公共事件发布相关属性、限制等信息，包括公共事件类型（有序或粘性）、接收者权限等</p><ul><li><p>有序公共事件</p><ul><li>主要场景是多个订阅者有依赖关系或者对处理顺序有要求</li><li>高优先级订阅者可修改公共事件内容或处理结果，包括终止公共事件处理</li><li>低优先级订阅者依赖高优先级的处理结果等</li><li>有序公共事件的订阅者可以通过CommonEventSubscribeInfo.setPriority()方法指定优先级，默认为0，优先级范围为[-1000,1000]，值越大优先级越高</li></ul></li><li><p>粘性公共事件</p><ul><li>指公共事件的订阅动作是在公共事件发布之后进行的，订阅者也能收到的公共事件类型</li><li>主要场景是由公共事件服务记录某些系统状态，如蓝牙、WLAN、充电等事件和状态</li><li>不使用粘性公共事件机制时，应用可以通过直接访问系统服务获取该状态</li><li>发布粘性公共事件可以通过setSticky()方法设置，发布粘性公共事件需要申请ohos.permission.COMMONEVENT_STICKY权限</li></ul></li></ul></li></ul></li><li><p>CommonEventSubscribeInfo</p><ul><li><p>CommonEventSubscribeInfo封装公共事件订阅相关信息，比如优先级、线程模式、事件范围等</p><ul><li><p>线程模式</p><ul><li>HANDLER：在Ability的主线程执行</li><li>POST：在事件分发线程执行</li><li>ASYNC：在一个新创建的异步线程执行</li><li>BACKGROUND：在后台线程执行</li><li>截至目前只支持HANDLER模式</li></ul></li></ul></li></ul></li><li><p>CommonEventSubscriber</p><ul><li><p>CommonEventSubscriber封装公共事件订阅者及相关参数</p><ul><li>CommonEventSubscriber.AsyncCommonEventResult类处理有序公共事件异步执行</li><li>目前只能通过调用CommonEventManager的subscribeCommonEvent()进行订阅</li></ul></li></ul></li><li><p>CommonEventManager</p><ul><li><p>CommonEventManager是为应用提供订阅、退订和发布公共事件的静态接口类</p><ul><li>发布公共事件：publishCommonEvent(CommonEventData event)</li><li>发布公共事件指定发布信息：publishCommonEvent(CommonEventData event,CommonEventPublishInfo publishinfo)</li><li>发布有序公共事件，指定发布信息和最后一个接收者：publishCommonEvent(CommonEventDataevent, CommonEventPublishInfo publishinfo, CommonEventSubscriberresultSubscriber)</li><li>订阅公共事件：subscribeCommonEvent(CommonEventSubscribersubscriber)</li><li>退订公共事件：unsubscribeCommonEvent(CommonEventSubscribersubscriber)</li></ul></li></ul></li></ul></li><li><p>发布公共事件</p><ul><li><p>发布无序的公共事件</p><ul><li>发布无序的公共事件时，构造CommonEventData对象，设置Intent，通过构造operation对象把需要发布的公共事件信息传入intent对象</li><li>然后调用 CommonEventManager.publishCommonEvent (CommonEventData)接口发布公共事件</li></ul></li><li><p>发布携带权限的公共事件</p><ul><li>发布携带权限的公共事件时，构造CommonEventPublishInfo对象，设置订阅者的权限</li><li>订阅者在config.json中申请所需的权限，各字段含义详见权限定义字段说明</li></ul></li><li><p>发布有序的公共事件</p><ul><li>发布有序的公共事件时，构造CommonEventPublishInfo对象，通过setOrdered(true)指定公共事件属性为有序公共事件</li><li>也可以指定一个最后的公共事件接收者</li></ul></li><li><p>发布粘性公共事件</p><ul><li>发布粘性公共事件时，构造CommonEventPublishInfo对象，通过setSticky(true)指定公共事件属性为粘性公共事件</li></ul></li></ul></li><li><p>订阅公共事件</p><ul><li>订阅公共事件时，首先创建CommonEventSubscriber派生类，在onReceiveEvent()回调函数中处理公共事件</li><li>注意：此处不能执行耗时操作，否则会阻塞UI线程，产生用户点击没有反应等异常</li></ul></li><li><p>退订公共事件</p><ul><li>在Ability的onStop()中调用CommonEventManager.unsubscribeCommonEvent()方法来退订公共事件</li><li>调用后，之前订阅的所有公共事件均被退订</li></ul></li></ul><h3 id="高级通知服务">高级通知服务</h3><ul><li><p>接口说明</p><ul><li><p>NotificationSlot</p><ul><li><p>NotificationSlot可以对提示音、振动、锁屏显示和重要级别等进行设置</p></li><li><p>一个应用可以创建一个或多个NotificationSlot，在发送通知时，通过绑定不同的NotificationSlot实现不同的用途</p></li><li><p>NotificationSlot需要先通过NotificationHelper的addNotificationSlot(NotificationSlot)方法发布后，通知才能绑定使用</p></li><li><p>所有绑定该NotificationSlot的通知在发布后都具备相应的特性，对象在创建后将无法更改这些设置，对于是否启动相应设置，用户有最终控制权</p></li><li><p>不指定NotificationSlot时，当前通知会使用默认的NotificationSlot，默认的NotificationSlot优先级为LEVEL_DEFAULT</p></li><li><p>NotificationSlot的级别目前支持如下几种，由低到高</p><ul><li><p>LEVEL_NONE：表示通知不发布</p></li><li><p>LEVEL_MIN：表示通知可以发布，但是不显示在通知栏，不自动弹出，无提示音</p><ul><li>该级别不适用于前台服务的场景</li></ul></li><li><p>LEVEL_LOW：表示通知可以发布且显示在通知栏，不自动弹出，无提示音</p></li><li><p>LEVEL_DEFAULT：表示通知发布后可在通知栏显示，不自动弹出，触发提示音</p></li><li><p>LEVEL_HIGH：表示通知发布后可在通知栏显示，自动弹出，触发提示</p></li></ul></li></ul></li><li><p>NotificationRequest</p><ul><li><p>NotificationRequest用于设置具体的通知对象，包括设置通知的属性，如通知的分发时间、小图标、大图标、自动删除等参数，以及设置具体的通知类型，如普通文本、长文本等</p></li><li><p>通知分组：对于同一类型的通知，比如电子邮件，可以放在一个群组内展示</p></li><li><p>小图标、大图标：分别通过NotificationRequest的setLittleIcon(PixelMap)、setBigIcon(PixelMap)设置的小图标、大图标</p></li><li><p>显示时间戳：通知除了显示时间戳外，还可以显示计时器功能，包含正计时和倒计时</p><ul><li>通知通过NotificationRequest的setCreateTime(Long)、setShowCreateTime(boolean)设置并显示时间戳。通知通过NotificationRequest的setShowStopwatch(boolean)显示计时器功能</li><li>通知通过NotificationRequest的setShowStopwatch(boolean)、setCountdownTimer(boolean)显示倒计时功能</li></ul></li><li><p>进度条：主要用于播放音乐、下载等场景</p><ul><li>通知通过NotificationRequest的setProgressBar(int, int,boolean)显示进度条</li></ul></li><li><p>从通知启动Ability：点击通知栏的通知，可以通过启动Ability触发新的事件</p><ul><li>通知通过NotificationRequest的setIntentAgent(IntentAgent)设置IntentAgent后，点击通知栏上发布的通知，将触发通知中的IntentAgent承载的事件</li><li>IntentAgent的设置请参考IntentAgent开发指导</li></ul></li><li><p>通知设置ActionButton：通过点击通知按钮，可以触发按钮承载的事件</p><ul><li>通过NotificationRequest的addActionButton(NotificationActionButton)附加按钮，点击按钮后可以触发相关的事件，具体事件内容如何设置需要参考NotificationActionButton</li></ul></li><li><p>通知设置ComponentProvider：通过ComponentProvider设置自定义的布局</p><ul><li>通过NotificationRequest的setCustomView(ComponentProvider)配置自定义布局，替代系统布局，具体布局信息如何设置需要参考ComponentProvider</li></ul></li><li><p>目前支持6种通知类型，包括</p><ul><li><p>普通文本（NotificationNormalContent）：若为通知的标题，则通过NotificationRequest的setTitle(String)方法设置</p><ul><li>若为通知的内容，则通过NotificationRequest的setText(String)方法设置</li></ul></li><li><p>长文本（NotificationLongTextContent）：长文本的内容通过setLongText(String)设置，文本长度最大支持1024个字符</p></li><li><p>图片（NotificationPictureContent）：具有图片的通知</p></li><li><p>多行（NotificationMultiLineContent）：若为折叠状态下的多行通知样式的标题，则通过NotificationMultiLineContent的setTitle(String)方法设置</p><ul><li>若为折叠状态下的多行通知样式的内容，则通过NotificationMultiLineContent的setText(String)方法设置</li><li>若为展开状态下的多行通知样式的标题，则通过NotificationMultiLineContent的setExpandedTitle(String)方法设置</li><li>若为展开状态下的多行通知样式的内容，则通过NotificationMultiLineContent的addSingleLine(String)方法设置</li></ul></li><li><p>社交（NotificationConversationalContent）：若为社交通知样式的标题，则通过NotificationConversationalContent的setConversationTitle(String)方法设置</p><ul><li>若为社交通知样式中的消息内容，则通过NotificationConversationalContent的addConversationalMessage(ConversationalMessage)方法设置</li></ul></li><li><p>媒体（NotificationMediaContent）：若为媒体通知样式的标题，则通过NotificationMediaContent的setTitle(String)方法设置</p><ul><li>若为媒体通知样式中的消息内容，则通过NotificationMediaContent的setText(String)方法设置</li><li>若为媒体通知样式对应的多媒体按钮，具备控制音频媒体的用途，则通过NotificationMediaContent的setAVToken(AVToken)、NotificationMediaContent的setShownActions(int[])方法设置</li></ul></li></ul></li></ul></li><li><p>NotificationHelper</p><ul><li>NotificationHelper封装了发布、更新、删除通知等静态方法</li><li>发布一条通知：publishNotification(NotificationRequest request)</li><li>发布一条带TAG的通知：publishNotification(String tag,NotificationRequest)</li><li>取消指定的通知：cancelNotification(int notificationId)</li><li>取消指定的带TAG的通知：cancelNotification(String tag, intnotificationId)</li><li>取消之前发布的所有通知：cancelAllNotifications()</li><li>创建一个NotificationSlot：addNotificationSlot(NotificationSlotslot)</li><li>获取NotificationSlo：getNotificationSlot(String slotId)</li><li>删除一个NotificationSlot：removeNotificationSlot(String slotId)</li><li>获取当前应用发布的活跃通知：getActiveNotifications()</li><li>获取系统中当前应用发布的活跃通知的数量：getActiveNotificationNums()</li><li>设置通知的角标：setNotificationBadgeNum(int num)</li><li>设置当前应用中活跃状态通知的数量在角标显示：setNotificationBadgeNum()</li></ul></li></ul></li><li><p>创建NotificationSlot</p><ul><li>NotificationSlot可以设置公共通知的震动、锁屏模式、重要级别等，并通过调用NotificationHelper.addNotificationSlot()发布NotificationSlot对象</li></ul></li><li><p>发布通知</p><ul><li><p>构建NotificationRequest对象</p><ul><li>应用发布通知前，通过NotificationRequest的setSlotId()方法与NotificationSlot绑定，使该通知在发布后具备该对象的特征</li></ul></li><li><p>设置通知内容</p><ul><li>调用setContent()设置通知的内容</li></ul></li><li><p>发送通知</p><ul><li>调用publishNotification()发送通知</li></ul></li></ul></li><li><p>取消通知</p><ul><li><p>取消通知分为取消指定单条通知和取消所有通知，应用只能取消自己发布的通知</p></li><li><p>取消指定的单条通知</p><ul><li>调用cancelNotification()取消指定的单条通知</li></ul></li><li><p>取消所有通知</p><ul><li>调用cancelAllNotifications()取消所有通知</li></ul></li></ul></li></ul><h2 id="第八章-剪切板">第八章 剪切板</h2><h3 id="剪贴板概述">剪贴板概述</h3><ul><li>提供系统剪贴板服务的操作接口，支持用户程序从系统剪贴板中读取、写入和查询剪贴板数据，以及添加、移除系统剪贴板数据变化的回调</li><li>提供剪贴板数据的对象定义，包含内容对象和属性对象</li></ul><h3 id="场景介绍">场景介绍</h3><ul><li><p>同一设备的应用程序A、B之间可以借助系统剪贴板服务完成简单数据的传递</p></li><li><p>在使用剪贴板服务时，需要注意以下几点</p><ul><li>只有在前台获取到焦点的应用才有读取系统剪贴板的权限（系统默认输入法应用除外）</li><li>写入剪贴板服务中的剪贴板数据不会随应用程序的结束而销毁</li><li>对同一用户而言，写入剪贴板服务的数据会被下一次写入剪贴板的数据所覆盖</li><li>在同一设备内，剪贴板单次传递的内容不应超过500KB</li></ul></li></ul><h3 id="接口说明">接口说明</h3><ul><li><p>在HarmonyOS中，SystemPasteboard提供系统剪贴板操作的相关接口，比如复制、粘贴、配置回调等</p><ul><li>PasteData是剪贴板服务操作的数据对象，一个PasteData由若干个内容节点（PasteData.Record）和一个属性集合对象（PasteData.DataProperty）组成</li><li>Record是存放剪贴板数据内容信息的最小单位，每个Record都有其特定的MIME类型，如纯文本、HTML、URI、Intent</li><li>剪贴板数据的属性信息存放在DataProperty中，包括标签、时间戳等</li></ul></li><li><p>SystemPasteboard</p><ul><li><p>SystemPasteboard提供系统剪贴板服务的操作接口，比如复制、粘贴、配置回调等</p></li><li><p>SystemPasteboard的主要接口如下</p><ul><li>获取系统剪贴板服务的对象实例：getSystemPasteboard(Contextcontext)</li><li>读取当前系统剪贴板中的数据：getPasteData()</li><li>判断当前系统剪贴板中是否有内容：hasPasteData()</li><li>将剪贴板数据写入系统剪贴板：setPasteData(PasteData data)</li><li>清空系统剪贴板数据：clear()</li><li>用户程序添加系统剪贴板数据变化的回调：addPasteDataChangedListener(IPasteDataChangedListener listener)</li><li>用户程序移除系统剪贴板数据变化的回调：removePasteDataChangedListener(IPasteData-ChangedListenerlistener)</li></ul></li></ul></li><li><p>PasteData</p><ul><li><p>PasteData是剪贴板服务操作的数据对象，其中内容节点定义为PasteData.Record，属性集合定义为PasteData.DataProperty</p></li><li><p>PasteData的主要接口如下</p><ul><li>构造器：PasteData()</li><li>构建一个包含纯文本内容节点的数据对象：createPlainTextData(CharSequencetext)</li><li>构建一个包含HTML内容节点的数据对象：creatHtmlData(StringhtmlText)</li><li>构建一个包含URI内容节点的数据对象：creatUriData(Uri uri)</li><li>构建一个包含Intent内容节点的数据对象：creatIntentData(Intentintent)</li><li>获取数据对象中首个内容节点的MIME类型：getPrimaryMimeType()</li><li>获取数据对象中首个内容节点的纯文本内容：getPrimaryText()</li><li>向数据对象中添加一个纯文本内容节点：addTextRecord(CharSequencetext)</li><li>向数据对象中添加一个内容节点：addRecord(Record record)</li><li>获取数据对象中内容节点的数量：getRecordCount()</li><li>获取数据对象在指定下标处的内容节点：getRecordAt(int index)</li><li>移除数据对象在指定下标处的内容节点：removeRecordAt(int index)</li><li>获取数据对象中所有内容节点的MIME类型列表：getMimeTypes()</li><li>获取该数据对象的属性集合成员：getProperty()</li></ul></li></ul></li><li><p>PasteData.Record</p><ul><li><p>一个PasteData中包含若干个特定MIME类型的PasteData.Record，每个Record是存放剪贴板数据内容信息的最小单位</p></li><li><p>PasteData.Record的主要接口如下</p><ul><li>构造一个MIME类型为纯文本的内容节点：createPlainTextRecord(CharSequencetext)</li><li>构造一个MIME类型为HTML的内容节点：createHtmlTextRecord(StringhtmlText)</li><li>构造一个MIME类型为URI的内容节点：createUriRecord(Uri uri)</li><li>构造一个MIME类型为Intent的内容节点：createIntentRecord(Intentintent)</li><li>获取该内容节点中的文本内容：getPlainText()</li><li>获取该内容节点中的HTML内容：getHtmlText()</li><li>获取该内容节点中的URI内容：getUri()</li><li>获取该内容节点中的Intent内容：getIntent()</li><li>获取该内容节点的MIME类型：getMimeType()</li><li>将该内容节点的内容转为文本形式：convertToText(Context context)</li></ul></li></ul></li><li><p>PasteData.DataProperty</p><ul><li><p>每个PasteData中都有一个PasteData.DataProperty成员，其中存放着该数据对象的属性集合，例如自定义标签、MIME类型集合列表等</p></li><li><p>PasteData.DataProperty的主要接口如下</p><ul><li>获取所属数据对象的MIME类型集合列表：getMimeTypes()</li><li>判断所属数据对象中是否包含特定MIME类型的内容：hasMimeType(StringmimeType)</li><li>获取所属数据对象被写入系统剪贴板时的时间戳：getTimestamp()</li><li>设置自定义标签：setTag(CharSequence tag)</li><li>获取自定义标签：getTag()</li><li>设置一些附加键值对信息：setAdditions(PacMap extraProps)</li><li>获取附加键值对信息：getAdditions()</li></ul></li></ul></li><li><p>IPasteDataChangedListener</p><ul><li>IPasteDataChangedListener是定义剪贴板数据变化回调的接口类，开发者需要实现此接口来编码触发回调时的处理逻辑</li><li>IPasteDataChangedListener的主要接口是onChanged()，这个是当系统剪贴板数据发生变化时的回调接口</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>开发文档</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ArkTs</tag>
      
      <tag>HarmonyOS</tag>
      
      <tag>应用开发</tag>
      
      <tag>博海拾贝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>考研数学第一版</title>
    <link href="/2024/05/02/pdf/"/>
    <url>/2024/05/02/pdf/</url>
    
    <content type="html"><![CDATA[<div class="row">    <embed src="./PostgraduateMathematicsPreview.pdf" width="100%" height="550" type="application/pdf"></div><p>(考研数学预览版)</p>]]></content>
    
    
    <categories>
      
      <category>在线 PDF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>高等数学</tag>
      
      <tag>数学</tag>
      
      <tag>考研数学</tag>
      
      <tag>线性代数</tag>
      
      <tag>概率论与数理统计</tag>
      
      <tag>LaTeX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/05/02/hello-world/"/>
    <url>/2024/05/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <ahref="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
